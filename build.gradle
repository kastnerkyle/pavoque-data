buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath group: 'org.yaml', name: 'snakeyaml', version: '1.17'
    }
}

plugins {
    id 'base'
    id 'de.undercouch.download' version '3.0.0'
}

import org.yaml.snakeyaml.Yaml

group 'de.dfki.mary'
version '0.2-SNAPSHOT'
description 'The PAVOQUE corpus of expressive speech'

ext {
    styles = ['angry', 'happy', 'neutral', 'poker', 'sad']
    yamlFiles = styles.collect { file("pavoque-${it}.yaml") }
}

task download {
    group 'Build'
    description 'Download audio files'
    doLast {
        download {
            src styles.collect { style ->
                "https://github.com/marytts/pavoque-data/releases/download/v0.2/pavoque-${style}.flac"
            }
            dest projectDir
            overwrite false
            compress false
            acceptAnyCertificate true
        }
    }
}

task text {
    def textDir = file("$buildDir/text")
    group 'Build'
    description "Extract utterance text as text files into $textDir"
    inputs.files yamlFiles
    outputs.dir textDir
    doFirst {
        textDir.mkdirs()
    }
    doLast {
        yamlFiles.each { yamlFile ->
            new Yaml().load(yamlFile.newReader()).each { utterance ->
                file("$textDir/${utterance.prompt}.txt").text = utterance.text
            }
        }
    }
}

task lab {
    def labDir = file("$buildDir/lab")
    group 'Build'
    description "Extract segments as Xwaves label files into $labDir"
    inputs.files yamlFiles
    outputs.dir labDir
    doFirst {
        labDir.mkdirs()
    }
    doLast {
        yamlFiles.each { yamlFile ->
            new Yaml().load(yamlFile.newReader()).each { utterance ->
                if (utterance.segments) {
                    file("$labDir/$utterance.prompt-${utterance.style}.lab").withWriter { lab ->
                        lab.println '#'
                        utterance.segments.each { segment ->
                            lab.println sprintf("    %s  125 %s", segment.end, segment.lab)
                        }
                    }
                }
            }
        }
    }
}

task wav {
    def wavDir = file("$buildDir/wav")
    group 'Build'
    description "Extract audio as WAV files into $wavDir"
    inputs.files yamlFiles
    outputs.dir wavDir
    doFirst {
        wavDir.mkdirs()
    }
    doLast {
        yamlFiles.each { yamlFile ->
            new Yaml().load(yamlFile.newReader()).each { utterance ->
                exec {
                    commandLine 'sox',
                            file("${yamlFile.name - '.yaml' + '.flac'}"),
                            file("$wavDir/$utterance.prompt-${utterance.style}.wav"),
                            'trim',
                            utterance.start,
                            '=' + utterance.end
                }
            }
        }
    }
}
